.define public PIN_AD_BASE     2
.define public PIN_O0         18
.define public PIN_NOE        19

.define public PIN_RGB_EN      0
.define public PIN_SYNC_IN     1

.define public PIN_RGB_RO     10
.define public PIN_RGB_GO     11
.define public PIN_RGB_BO     12

.define public PIN_RGB_RI     20
.define public PIN_RGB_GI     21
.define public PIN_RGB_BI     22

.define public PIN_SEL_BASE   26
.define public PIN_SELDT      (PIN_SEL_BASE + 0)
.define public PIN_SELAH      (PIN_SEL_BASE + 1)
.define public PIN_SELAL      (PIN_SEL_BASE + 2)

.define        NOTHING        0b111
.define        ADDRESS_LOW    0b011
.define        ADDRESS_HIGH   0b101
.define        DATA           0b110

.define public SYSCLK_MHZ     144

.define        DELAY_NS       150
.define        DELAY_CYCLES   (((DELAY_NS*SYSCLK_MHZ)/1000) - 4)

;;
;; ACCESS RAM STATE MACHINE
;;
;; There are two instances of this, one for reads, the other for write, with different wrap targets.
;;
;; Both instances are driving side select every cycle, in theory in exact lock-step. If there
;; were conflicts, I believe the higher number state machine should win, which is the read state machine.
;;

.program access_ram                                     ; 27 instructions
.side_set 3

public read_wrap_target:
    jmp  !y idle_data                 side DATA         ; Y=Rnw - skip the FIFO push on write cycles (RnW=0)
    in   x 17                         side DATA         ; shift fixed part of ARM address (held in x) into ISR and trigger auto push
    pull block                        side DATA         ; pull the data from the Tx FIFO into the OSR
    out  pins 8                       side DATA         ; output 8 bits of data
    mov  osr ~NULL                    side DATA         ; OSR=FFFFFFFF
    out  pindirs 8                    side DATA         ; start driving the data bus

idle_data:
    wait 1 gpio PIN_O0                side DATA         ; wait for the start of the next cycle with data buffers ENABLED
    wait 0 gpio PIN_O0                side DATA         ; wait for the start of the next cycle with data buffers ENABLED
    set  pindirs 0                    side NOTHING      ; stop driving the data bus
    jmp  delay                        side NOTHING      ; jump to the noe delay code

public entry_point:                                     ; *** Default Entry Point ***

idle:
    wait 1 gpio PIN_O0                side NOTHING      ; wait for the start of the next cycle with data buffers DISABLED
    wait 0 gpio PIN_O0 [2]            side NOTHING      ; wait for the start of the next cycle with data buffers DISABLED

public write_wrap_target:
delay:
    set  y DELAY_CYCLES               side NOTHING      ; should be reached 3 instructions after cycle start IN ALL CASES
loop:
    jmp  y-- loop                     side ADDRESS_LOW  ; delay to allow nOE to stablize

    mov  isr null                     side ADDRESS_LOW  ; Clear ISR
    in   pins 1                       side ADDRESS_LOW  ; RnW in bit 31 of ISR, other bits cleared
    mov  y isr                        side ADDRESS_LOW  ; y = RnW (0 or !0)
    jmp  pin idle                     side ADDRESS_LOW  ; if nOE is high, then loop back to idle

    in   pins 8 [3]                   side ADDRESS_HIGH ; shift A6..0/RnW into ISR, then select the high address byts
    nop  [3]                          side ADDRESS_HIGH ; == 1 cycles + ~10ns + 2/3 cycles = 6 cycles
    in   pins 8                       side ADDRESS_HIGH ; shift A14..7 into ISR

public read_wrap:                                       ; *** READ state machine wraps to read_wrap_target ***

    jmp  y-- idle_data                side DATA         ; Y=Rnw - skip the FIFO push on read cycles (RnW=1)
    in   x 17                         side DATA         ; shift fixed part of ARM address (held in x) into ISR and trigger auto push

    wait 1 gpio PIN_O0                side DATA         ; wait for the start of the next cycle with data buffers ENABLED
    wait 0 gpio PIN_O0                side DATA         ; wait for the start of the next cycle with data buffers ENABLED
    in   pins 8                       side NOTHING      ; sample read data
    in   null 24                      side NOTHING      ; pad to 32-bit to align in LSB, and trigger auto push

public write_wrap:                                      ; *** WRITE state machine wraps to write_wrap_target ***


;;
;; PASS THROUGH THE RGB INPUT TO RGB OUTPUT
;;
;; Simple copy the RGB input to the RGB output for Electron mode 0...6
;;
;; This version syncronises on the falling edge of sync and then
;; tries to sample in the middle of each pixel.
;;
;; The delays assume the Pico clock is 9x the 16MHz pixel clock, i.e. 144MHz

.program mirror_bits
.wrap_target
    wait 0 gpio PIN_SYNC_IN
    mov y,x  [3]      ; Load loop counter from constant pre-loaded in X, half pixel delay
loop:
    mov pins,pins [7] ; total 9 clocks around the loop
    jmp y-- loop
.wrap

% c-sdk {

    void access_ram_program_init(PIO pio, uint sm, uint offset, int write_smc) {
        pio_sm_config c = access_ram_program_get_default_config(offset);
        sm_config_set_jmp_pin (&c, PIN_NOE);
        sm_config_set_in_pins(&c, PIN_AD_BASE);
        sm_config_set_out_pins(&c, PIN_AD_BASE, 8);
        sm_config_set_sideset_pins(&c, PIN_SEL_BASE);
        sm_config_set_in_shift( &c, true, true, 32);  // shift right=true, auto-push=true
        sm_config_set_out_shift(&c, true, false, 8);  // shift right=true, auto-pull=false
        pio_sm_set_consecutive_pindirs(pio, sm, PIN_SEL_BASE, 3, true);
        if (write_smc) {
            sm_config_set_wrap(&c, offset + access_ram_offset_write_wrap_target, offset + access_ram_offset_write_wrap - 1);
        } else {
            sm_config_set_wrap(&c, offset + access_ram_offset_read_wrap_target,  offset + access_ram_offset_read_wrap  - 1);
        }
        pio_sm_init(pio, sm, offset + access_ram_offset_entry_point, &c);
        }

    void mirror_bits_program_init(PIO pio, uint sm, uint prog_offset, uint input_gpio, uint output_gpio, uint noof_bits) {
    	pio_sm_config cfg = mirror_bits_program_get_default_config(prog_offset);
    	sm_config_set_in_pins(&cfg, input_gpio);
    	sm_config_set_out_pins(&cfg, output_gpio, noof_bits);
    	pio_sm_set_consecutive_pindirs(pio, sm, output_gpio, noof_bits, true);
    	pio_sm_init(pio, sm, prog_offset, &cfg);
    	for (int i = 0; i < noof_bits; i++) {
            pio_gpio_init(pio, output_gpio + i);
        }
    }

%}
